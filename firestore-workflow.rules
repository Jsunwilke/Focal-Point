rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user's organization ID
    function getUserOrg(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.organizationID;
    }
    
    // Helper function to check if user is admin
    function isAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.role == 'admin';
    }
    
    // Helper function to check if user is admin or manager
    function isAdminOrManager(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let role = userDoc.data.role;
      return role == 'admin' || role == 'manager';
    }
    
    // Helper function to check if user belongs to same organization
    function belongsToSameOrg(userId, orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.organizationID == orgId;
    }

    // Organizations collection
    match /organizations/{orgId} {
      allow read: if request.auth != null && belongsToSameOrg(request.auth.uid, orgId);
      allow read: if request.auth == null || request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, orgId) && 
                       isAdmin(request.auth.uid);
      allow delete: if false;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      belongsToSameOrg(request.auth.uid, resource.data.organizationID) ||
                      resource.data.isActive == false);
      allow create: if request.auth != null && 
                       (request.auth.uid == userId ||
                        (isAdmin(request.auth.uid) &&
                         belongsToSameOrg(request.auth.uid, request.resource.data.organizationID)));
      allow update: if request.auth != null && 
                       (request.auth.uid == userId ||
                        isAdmin(request.auth.uid) ||
                        (resource.data.isActive == false && request.resource.data.isActive == true));
      allow delete: if false;
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Workflow Templates collection
    match /workflowTemplates/{templateId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Workflows collection (workflow instances)
    match /workflows/{workflowId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Schools collection
    match /schools/{schoolId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Daily Job Reports collection
    match /dailyJobReports/{reportId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if false;
    }

    // Sports Jobs collection
    match /sportsJobs/{jobId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Time Entries collection
    match /timeEntries/{entryId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Report Templates collection
    match /reportTemplates/{templateId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Time Off Requests collection
    match /timeOffRequests/{requestId} {
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}