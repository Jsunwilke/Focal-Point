rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user's organization ID
    function getUserOrg(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.organizationID;
    }
    
    // Helper function to get user's role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is admin
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }
    
    // Helper function to check if user is admin or manager
    function isAdminOrManager(userId) {
      let role = getUserRole(userId);
      return role == 'admin' || role == 'manager';
    }
    
    // Helper function to check if user belongs to same organization
    function belongsToSameOrg(userId, orgId) {
      return getUserOrg(userId) == orgId;
    }

    // Organizations collection
    match /organizations/{orgId} {
      // Users can read their own organization
      allow read: if request.auth != null && belongsToSameOrg(request.auth.uid, orgId);
      
      // **INVITATION FLOW: Allow reading specific organization for invitation display**
      // This is needed when showing organization name on invitation acceptance page
      allow read: if request.auth == null || request.auth != null;
      
      // Only authenticated users can create organizations (during studio signup)
      allow create: if request.auth != null;
      
      // Only admins can update their organization
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, orgId) && 
                       isAdmin(request.auth.uid);
      
      // No deletes allowed
      allow delete: if false;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Users in same organization can read each other (for team management)
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // **INVITATION FLOW: Allow reading inactive users for invitation lookup**
      allow read: if resource.data.isActive == false;
      
      // Users can create their own profile (during signup)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Admins can create user profiles (for invites)
      allow create: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Users can update their own profile
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       // Prevent users from changing their own role or organizationID
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.organizationID == resource.data.organizationID;
      
      // Admins can update users in their organization
      allow update: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID) &&
                       // Prevent changing organizationID
                       request.resource.data.organizationID == resource.data.organizationID;
      
      // **INVITATION FLOW: Allow activating inactive invitations**
      allow update: if request.auth != null &&
                       resource.data.isActive == false &&
                       request.resource.data.isActive == true &&
                       // Prevent changing critical fields during activation
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.organizationID == resource.data.organizationID &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.firstName == resource.data.firstName &&
                       request.resource.data.lastName == resource.data.lastName;
      
      // No deletes, only deactivation (set isActive: false)
      allow delete: if false;
    }

    // Sessions collection - NEW
    match /sessions/{sessionId} {
      // Users can read sessions from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Users can create sessions for their organization
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Users assigned to the session can update it
      allow update: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID) &&
                       (isAdminOrManager(request.auth.uid) ||
                        // Check if user is one of the assigned photographers
                        request.auth.uid in resource.data.photographers.map(['id']) ||
                        // Legacy support for single photographer format
                        request.auth.uid == resource.data.photographer.id);
      
      // Admins/Managers can update any session in their organization
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins can delete sessions
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Daily Job Reports collection
    match /dailyJobReports/{reportId} {
      // Users can read reports from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Users can create reports for their organization
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Users can update their own reports
      allow update: if request.auth != null && 
                       resource.data.yourName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.displayName &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins/Managers can update any report in their organization
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // No deletes
      allow delete: if false;
    }

    // Schools collection (renamed from dropdownData)
    match /schools/{schoolId} {
      // Users can read schools from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins/Managers can create schools
      allow create: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Admins/Managers can update schools
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins can delete schools (soft delete recommended)
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Sports Jobs collection
    match /sportsJobs/{jobId} {
      // Users can read sports jobs from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Users can create sports jobs for their organization
      allow create: if request.auth != null && 
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Users assigned to the job can update it
      allow update: if request.auth != null && 
                       resource.data.photographer == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.displayName &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins/Managers can update any sports job in their organization
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins can delete sports jobs
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Player Search Index collection
    match /playerSearchIndex/{indexId} {
      // Users can read search index from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Only allow system/cloud functions to write to search index
      allow write: if false;
    }

    // Job Boxes collection
    match /jobBoxes/{boxId} {
      // Users can read job boxes from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Users can create/update job boxes for their organization
      allow create, update: if request.auth != null && 
                               belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Admins can delete job boxes
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // SD Cards collection
    match /sdCards/{cardId} {
      // Users can read SD cards from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Users can create/update SD cards for their organization
      allow create, update: if request.auth != null && 
                               belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Admins can delete SD cards
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Records collection (general records)
    match /records/{recordId} {
      // Users can read records from their organization (if organizationID exists)
      allow read: if request.auth != null && 
                     (resource.data.organizationID == null || 
                      belongsToSameOrg(request.auth.uid, resource.data.organizationID));
      
      // Users can create records
      allow create: if request.auth != null;
      
      // Users can update their own records or admins can update any
      allow update: if request.auth != null && 
                       (request.auth.uid == resource.data.createdBy ||
                        isAdmin(request.auth.uid));
      
      // Admins can delete records
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Daily Job Report Templates collection (new for web app)
    match /dailyJobReportTemplates/{templateId} {
      // Users can read templates from their organization
      allow read: if request.auth != null && 
                     belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins/Managers can create templates
      allow create: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, request.resource.data.organizationID);
      
      // Admins/Managers can update templates
      allow update: if request.auth != null && 
                       isAdminOrManager(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
      
      // Admins can delete templates
      allow delete: if request.auth != null && 
                       isAdmin(request.auth.uid) &&
                       belongsToSameOrg(request.auth.uid, resource.data.organizationID);
    }

    // Deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}